// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc103.Swerve2017Test;

import static org.usfirst.frc103.Swerve2017Test.RobotMap.driveLeftFront;
import static org.usfirst.frc103.Swerve2017Test.RobotMap.driveLeftRear;
import static org.usfirst.frc103.Swerve2017Test.RobotMap.driveRightFront;
import static org.usfirst.frc103.Swerve2017Test.RobotMap.driveRightRear;
import static org.usfirst.frc103.Swerve2017Test.RobotMap.shooterElevator;
import static org.usfirst.frc103.Swerve2017Test.RobotMap.shooterFlyWheel;
import static org.usfirst.frc103.Swerve2017Test.RobotMap.steerLeftFront;
import static org.usfirst.frc103.Swerve2017Test.RobotMap.steerLeftRear;
import static org.usfirst.frc103.Swerve2017Test.RobotMap.steerRightFront;
import static org.usfirst.frc103.Swerve2017Test.RobotMap.steerRightRear;

import org.usfirst.frc103.Swerve2017Test.subsystems.Climber;
import org.usfirst.frc103.Swerve2017Test.subsystems.Drive;
import org.usfirst.frc103.Swerve2017Test.subsystems.GearManipulator;
import org.usfirst.frc103.Swerve2017Test.subsystems.Shooter;

import edu.wpi.first.wpilibj.GenericHID.Hand;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    public static OI oi;
    public static Drive drive;
    public static Shooter shooter;
    public static GearManipulator gearManipulator;
    public static Climber climber;
    
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    	RobotMap.init();
    	
        drive = new Drive();
        shooter = new Shooter();
        gearManipulator = new GearManipulator();
        climber = new Climber();
        
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
        updateDashboard();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        updateDashboard();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        updateDashboard();
        
        /*double angle = (360.0 - oi.rightJoy.getDirectionDegrees()) / 360.0 * 1024.0;
        RobotMap.steerLeftFrontSteer.setSetpoint(angle);
        RobotMap.steerLeftRearSteer.setSetpoint(angle);
        RobotMap.steerRightFrontSteer.setSetpoint(angle);
        RobotMap.steerRightRearSteer.setSetpoint(angle);
        
        double speed = oi.rightJoy.getMagnitude();
    	RobotMap.driveLeftFrontDrive.set(speed);
    	RobotMap.driveLeftRearDrive.set(speed);
    	RobotMap.driveRightFrontDrive.set(speed);
    	RobotMap.driveRightRearDrive.set(speed);*/

    	shooterElevator.set(oi.controller.getTriggerAxis(Hand.kLeft));
    	shooterFlyWheel.set(oi.controller.getTriggerAxis(Hand.kRight));
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
    
    private void updateDashboard() {
    	SmartDashboard.putNumber("LeftFrontSteerPosition", steerLeftFront.getPosition());
    	SmartDashboard.putNumber("LeftRearSteerPosition", steerLeftRear.getPosition());
    	SmartDashboard.putNumber("RightFrontSteerPosition", steerRightFront.getPosition());
    	SmartDashboard.putNumber("RightRearSteerPosition", steerRightRear.getPosition());

    	SmartDashboard.putNumber("LeftFrontDriveSpeed", driveLeftFront.getSpeed());
    	SmartDashboard.putNumber("LeftRearDriveSpeed", driveLeftRear.getSpeed());
    	SmartDashboard.putNumber("RightFrontDriveSpeed", driveRightFront.getSpeed());
    	SmartDashboard.putNumber("RightRearDriveSpeed", driveRightRear.getSpeed());
    	
    	SmartDashboard.putNumber("FlyWheelSpeed", shooterFlyWheel.getSpeed());
    }
}
